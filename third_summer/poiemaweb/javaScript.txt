자바스크립트
    HTML, CSS와 함께 웹을 구성하는 요소 중 하나.
    웹 브라우저에서 동작하는 유일한 프로그래밍 언어
    인터프리터 언어(개발자가 별도의 컴파일 작업을 수행하지 않음)
    대부분의 보던 자바스크립트 엔진은 인터프리터와 컴파일러의 장점을 결합
    - 인터프리터는 소스코드를 즉시 실행
    - 컴파일러는 빠르게 동작하는 머신 코드를 생성하고 최적화
    -> 비교적 처리 속도가 느린 인터프리터의 단점을 해결
    -> 컴파일 단계에서 추가적인 시간이 필요함에도 불구하고 보다 빠른 코드의 실행이 가능함


    멀티 패러다임 프로그래밍 언어임
    -> 명령형, 함수형, 프로토타입 기반 객체지향 프로그래밍을 지원
    class, 상속, private가 없어서 객체지향 언어가 아니라고 오해하는 경우도 있지만
    class기반 객체지향 언어보다 효율적이면서 강력한 프로토타입 기반 객체지향 언어임

    nodeJS의 등장으로 웹 브라우저를 벗어나 서버 사이드 앱 개발에서도
    사요되는 범용 개발 언어가 됨
    but 가장 많이 사용되는 분야는 웹 환경에서 동작하는 웹페이지/앱

    브라우저의 핵심 기능
    - 사용자가 참조하고자 하는 웹페이지를 소버에 요청(request)
    - 서버의 응답을 받아 브라우저에 표시(repond)
    
기본 문법
- 변수
    변수를 선언할 떄 var키워드를 사용
    var x; // 변수의 선언
    x = 6; // 정수값의 할당

- 값
    데이터 타입 : 사용할 수 있는 값의 종류
        number, string, boolean, null, undefined, symbol, object
        자바스트립트는 변수를 선언할 때 데이터 타입을 미리 지정하지 않음
        변수에 할당된 값의 타입에 의해 동적으로 결정됨 -> 동적 타이핑
    변수 : 값이 저장된 메모리 공간의 주소를 가리키는 식별자
    리터럴 : 소스코드 안에서 직접 만들어 낸 상수 값 자체를 말함. 값을 구성하는 최소 단위

    리터럴 vs 값
    리터럴 : 코드 안에서 값을 직접 표현하는 표기법. 값을 직접 써 놓은 형태
    값 : 프로그램 실행 중에 메모리에 저장되어 있는 데이터 자체. 실제 데이터

- 연산자
    알고있는것들과 동일함
    피연산자의 타입은 반드시 일치할 필요는 없음(암묵적 타입 강제변환을 하기 때문)
    ex. var foo = 1 + '10'; // '110'
        var bar = 1 * '10'; // 10

- 키워드
    : 수행할 동작을 규정한 것.
    
    // 변수의 선언
    var x = 0;

    // 함수의 선언
    function foo (arg){
        // 함수 종료 및 값의 반환
        return ++arg;
    }
    
    // 반복문, 조건문, break (기존과 동일)

- 문
    프로그램(스크립트)는 컴퓨터에 의해 단계별로 수행될 명령들의 집합.
    각각의 명령문을 문(statement)이라 하며 문이 실행되면 뭔가가 일어남
    문은 리터럴, 연산자, 표현식, 키워드 등으로 구성
    코드블록({...})으로 그룹화할 수 있음

- 표현식
    하나의 값으로 평가됨
    값(리터럴), 변수, 객체의 프로퍼티, 배열의 요소, 함수/메서드 호출,
    피연산자와 연산자의 조합이 해당됨
    ex.
    5 -> 5
    5 * 10 -> 50
    5 * 10 > 10 -> true

- 문과 표현식의 비교
    문 : 마침표로 끝나는 하나의 완전한 문장
    표현식 : 문을 구성하는 요소

    ex. 
    var x = 5 * 10; -> 표현식 x = 5 * 10을 포함하는 문
    x = 100; -> 이 자체가 표현식이지만 완전한 문이기도 함

- 함수
- 객체
    원시 타입을 제외한 나머지 값들(함수, 배열, 정규표현식 등)은 모두 객체
    자바스크립트 객체는 키(이름)과 값으로 구성된 프로퍼티의 집합
    ex.
    var person = {
        name : 'Lee',
        gender : 'male',
        sayHello : function(){
            console.log('Hi My name is ' + this.name);
        }
    };

    console.log(typeof person); -> object
    console.log(person) -> {name:'Lee', gender ...}
    person.sayHello(); -> Hi My name is Lee

    -> 객체는 데이터를 의미하는 프로퍼티와
    데이터를 참조하고 조작할 수 있는 동작을 의미하는 메서드로 구성된 집합

- 배열
    var arr = [1, 2, 3, 4, 5];
    consloe.log(arr[1]); -> 2

데이터 타입과 변수
    자바스크립트는 동적타입 언어
    -> 변수의 타입 지정 없이 값이 할당되는 과정에서 자동으로 변수의 타입이 결정됨
    -> 변수는 고정된 타입이 없어서 같은 변수에 여러 타입의 값을 자율롭게 할당 가능
    var foo = 'string';
    console.log(typeof foo); // string
    foo = 1;
    console.log(typeof foo); // number

    - number
    다른 언어에서는 숫자의 형태를 구분하지만 자바스크립트는 하나
    그래서 2,8,16진수의 값을 참조하면 모두 10진수로 해석됨
    정수만을 위한 타입이 없고 모든 수를 실수처리 함
    정수로 표시된다 해도 사실은 실수 -> 정수로 표시되는 수 끼리 나눠도 실수가 나올수 있음
    Infinity(무한대), NaN(산술 연산 불가) -> 특별한 값 표현

    - string
    ' ' 또는 " " 안에 텍스트를 넣어 생성
    