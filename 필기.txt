숫자형
    숫자형은 사칙연산 가능

문자형형
    문자형은 print로 출력가능 print("문자형"), print('문자형') 둘다 가능
    문자형과 숫자형은 섞어서 계산 가능
        print("ㅋㅋㅋㅋㅋ")
        print("ㅋ"*5) 두개 똑같은거임

blean형도 있음 
    특별한건 없고 앞에 not 붙이면 반대 되는거

변수 설정 가능한데 앞에 자료형 안붙이고 그냥 하면됨
    name = "최서윤"
    age = 21 이렇게..
    print 할떄는 문자형 아닌것들은 str()로 감싸서 출력해야함
    아닌거는 문자열 결합할때 , 로 결합할 수 있는데 빈칸 하나 같이 출력됨

연산자
    다른거 다 같음
    제곱은 ^가 아니고 **로 함
    /는 소숫점까지 표현하고 몫만 구하는건 //로함
    비교연산자도 같음
    앞에서 blean형에서는 not 사용했는데 비교연산자는 !사용. 
    print(1 != 3)
    print(not (1==3)) 두개 똑같은거임

    and연산자는 &로 대체 가능. 둘다 사용할수 있음
    print(a and b)랑 print(a & b) 랑 똑같음
    
    or연산자는 |로 대체 가능. 둘다 사용할수 있음
    print(a or b)랑 print(a | b)랑 같음

    a += b
    a -= b
    a *= b
    a /= b
    a %= b 다 가능

숫자함수
    abs(number) : 절댓값 반환
    pow(a, b) : a^b 반환
    max(a, b) : 최댓값 반환
    min(a, b) : 최솟값 반환
    round(number) : 반올림해서 정수형태로 반환

    math library에 있는 함수
    floor(number) : 내림. 소숫점 버림
    ceil(number) : 올림. 무조건 올림
    squrt(number) : 제곱근 반환

    랜덤 함수
    random library에 있음
    random() : 0.0이상, 1.0 미만의 임의의 값 생성
    random()*10 : 0.0 ~ 10.0 미만의 임이의 값 생성
    소숫점 보기 싫으면 int()로 감싸주면 됨

    randrange(a, b) : a부터 b 미만의 임의의 값 생성

    randint(a, b) : a부터 b 이하의 임의의 값 생성성

문자열
    문자열 설정할때 ""랑 ''는 차이 없음
    근데 """ """여기 안에 문자열 넣을수 있음 이거로 하면 줄바꿈까지 포함 가능

    슬라이싱 : 필요한부분만 자를수 있음
    문자열변수[index] -> 문자열 index에 있는 문자를 가져옴
    [a:b] 하면 a부터 b전까지 가져옴
    [:a] 하면 처음부터 a전까지 가져옴
    [a:]하면 a부터 끝까지 가져옴

    index순서를 음수로도 계산할 수 있음 -1이 맨 마지막 index임
    [-3:]뒤에서 세번째부터 끝까지

문자열함수
    가장 많음

    - 문자열.lower() : 다 소문자로 변경
    - 문자열.upper() : 다 대문자로 변경
    - 문자열[index].isupper() : 대문자면 true, 소문자면 false 반환
    - len(문자열) : 문자열 길이 반환
    - 문자열.replace(a, b) : 문자열 안에 있는 a를 b로 변경해줌
    - 문자열.index("a", n) : 문자열 안에서 n번째 index부터 a가 위치한 index를 반환
        n의 기본값은 0. 안에 찾는게 없으면 에러나고 즉시 프로그램 종료
    - 문자열.find("a") : 위와 동일. 근데 안에 없으면 -1 반환
    - 문자열.count("a") : 문자열 안에 a가 존재하는 횟수 반환

문자열 포멧
    1.
        print("나는 %d살 입니다" %20) - d는 정수
        print("나는 %s를 좋아해요" %"파이썬") - s는 문자열
        print("Apple은 %c로 시작해요." %"A") - c는 문자

        %s로 하면 왠만한거는 다 출력됨

        print("나는 %s색과 %s색을 좋아해요." %("파란", "빨간")) - 여러개 할때 이렇게함

    2.
        print("나는 {}살 입니다." .format(20)) - 괄호에 있는 값을 {}자리에 넣어줌
        print("나는 {}색과 {}색을 좋아해요" .format("파란", "빨간")) - 여러개 할때
        print("나는 {0}색과 {1}색을 좋아해요" .format("파란", "빨간"))
            숫자로 어디에 뭐가 들어갈지 정할 수 있음

    3.
        print("나는 {age}살이며, {color}색을 좋아해요." .format(age = 20, color ="빨간"))
            값을 정의해서 사용할 수 있음

    4. (v3.6 이상부터 가능함)
        age = 20 ->변수선언
        color = "빨간"
        print(f"나는 {age}살이며, {color}색을 좋아해요.")
        ->f를 입력하고 시작하면 실제 변수값을 사용할 수 있음

탈출문자
    print("백문이 불여일견 
    백견이 불여일타") -> 그냥 이렇게 하면 안됨
    print("백문이 불여일견\n백견이 불여일타") -> \n은 줄바꿈을 의미

    print("저는 "최서윤"입니다") -> 에러남
    print('저는 "최서윤"입니다') -> 바깥을 ''로 감싸면 사용가능
    print("저는 \"최서윤\"입니다") -> 혹은 \을 사용해서 사용가능

    \\ : 문장 내에서 \로 나타남

    \r : 커서를 맨앞으로 이동
    print("Red Apple\rPine") -> PineApple 출력
        \r뒤에 있는 문자열로 앞에있는 문자열을 교체하는거임

    \b :백스페이스 (한글자 지우는거)
    print("Redd\bApple") -> RedApple 출력
        \b바로 앞에있는 문자 삭제

    \t : 탭
        print("Red\tApple") -> Red  Apple

리스트 : 순서를 가지는 객체의 집합

    지하철 칸별로 10명, 20명, 30명
    subway1 = 10
    subway2 = 20
    subway3 = 30

    -> subway = [10, 20, 30]

    name = ["유재석", "조세호", "박명수"]
    조세호가 몇번째 인인지
    -> name.index("조세호")

    name.append("하하") -> 맨 뒤에 추가

    name.insert(1, "정형돈") -> 1번 index에 정형돈을 추가. 뒤에꺼는 index가 하나씩 밀림

    name.pop() -> 맨 뒤에꺼 반환 후 삭제

    같은 값이 몇개 있는지 확인
    name.count("유재석") -> name 리스트에 유재석이 몇명 있는지 반환

    정렬 가능
    num_list = [5,2,4,3,1]
    num_list.sort() -> 오름차순으로 정렬

    num_list.reverse() -> 값들의 index가 뒤집힘

    num_list.clear() -> 리스트 안에 있는 값들을 모두 지움

    리스트는 자료형에 구애받지 않고 사용가능
    mix_list = ["조세호", 20, true] -> 가능

    리스트 확장
    num_list.extend(mix_list) -> num_list에 mix_list를 합침

사전 : 자료형. key와 value 형태
    key : 그에 해당하는 value를 가짐. 중복이 안됨
    key:value 형태

    cabinet = {3:"유재석"} -> 3은 key, 유재석은 value
    print(cabinet[3]) -> 유재석
    print(cabinet.get(3)) -> 유재석

    할당되지 않은 key값으로 print(cabinet[5]) 하면 에러뜬 후 그 즉시 프로그램 종료
    할당되지 않은 key값으로 print(cabinet.get(5)) 하면 none 출력 후 이후 명령 실행
        -> none 대신 기본값 설정 가능.
        print(cabinet.get(5, 기본값)) 하면 기본값으로 출력됨

    key in 변수 : 변수 안에 특정 key가 있는지 boolean으로 확인가능.

    key는 다양한 문자형으로 가능.

    새로운 값 삽입 : 변수[key] = value 로 하면 됨
        cabinet[6] = "조세호"
        기존에 있던 key라면 value가 새로 변경되는거임

    기존 값 삭제 : del 변수[key]
        del cabinet[5]

    key들만 출력 : print(변수.keys())
    value들만 출력 : print(변수.values())
    key, value 쌍으로 출력 : print(변수.items())

    모든 값 삭제 : 변수.clear

튜플 : 내용 변경과 추가가 불가. 리스트보다 속도가 빠름
    menu = ("돈까스", "치즈까스") -> 괄호로 표현

    값을 추가, 변경은 불가. 고정된 값만 사용가능

집합 : 중복이 안되고 순서가 없음
    my_set = {1,2,3,3,3}
    print(my_set) -> {1,2,3} 중복되면 무시됨

    교집합 : & 또는 a.intersection(b)
    합집합 : | 또는 a.union(b)
    차집합 : - 또는 a.difference(b)

    추가 : my_set.add(추가할 값)
    삭제 : my_set.remove(제외할 값)

자료구조의 변경
    menu = {"커피, "우유", "주스"} -> set

    menu = list(menu) -> list로 바뀜
    print(menu) -> ["커피", "우유", "주스"] 

    menu = tuple(menu) -> tuple로 바뀜
    print(menu) -> ("커피", "우유", "주스")

    menu = set(menu) -> 다시 set으로 바뀜

if
    if 조건:
        실행명령문
    elif 조건:
        실행명령문
    else:
        실행명령문
    
    조건에는 and랑 or 사용 가능능

    if weather == "비" or weather == "눈":
        print("우산을 챙기세요")
    elif weather == "미세먼지"
        print("마스크를 챙기세요")
    else:
        print("준비물이 필요없어요")

    temp = int(input("기온은 어떄요?"))
    if temp >= 30:
        print("너무 더워요 나가지 마세요")
    elif temp >= 10 and temp <30:
        print("괜찮은 날씨에요")
    else:
        print("외투를 챙기세요:)
    
for 반복문
    for number in [0,1,2,3,4] :
        print("대기번호 : {0}" ,format(number))
    ->0,1,2,3,4 순서대로 출력

    for number in range(5) 하면 0,1,2,3,4까지 주어짐. 위에랑 똑같음
    1부터 시작하려면 range(1,6) 으로 하면됨.

    starbucks = ["아이언맨", "토르", "그루트"]
    for customer in starbucks:
        print("{0}, 준비되었습니다." .format(customer))

    한줄 for 
        명령 for 변수 in 변수

        학생 이름을 길이로 변환
        students = ["Iron man", "Thor", "groot"]
        students = [len(i) for i in students]

while 반복문
    while(조건):
        실행문
    
    customer = "토르"
    index = 5
    while index >= 1 :
        print("{0}, 준비되었습니다. {1}번 남았어요".format(customer, index))
        index -= 1

    continue : 뒤에 명령문 실행하지 않고 다음 반복으로 넘어감
    break : 뒤에 명령문 실행하지 않고 반복문 종료

함수
    def 함수이름():
        함수에서 수행되는 내용
    
    실행하려면 함수이름() 하면됨

    def 함수이름(전달값1, '''):
        실행내용

    반환하는건 똑같이 return 해주면 됨.
    return에 여러개의 값을 ,로 구분해서 반환하게되면 튜플 형태로 반환함.

*갑작스런 꿀팁
    화면이 작고 한줄에 너무 길게 코드가 짜여졌을때는 \
    이렇게 \하고 엔터치면 코드가 이어짐

    print("출력할거", end=" ") -> 하면 줄바꿈 출력할거가 출력되고 줄바꿈을 하지않음

    기본값 : 함수를 사용할때 여러개의 같은 값을 사용할때 사용됨
        
        def profile(name, age=17, lang="파이썬"):
            print("이름:{0}\t나이:{1}\t사용언어:{2}" .format(name,age,lang))

        profile("유재석")
        profile("김태호")
        -> 이렇게 하면 둘다 나이랑 사용언어가 고정돼서 굳이 전달값을 안보내도됨
        전달값을 다른걸로 보내면 다른걸로 됨

    키워드값을 이용한 함수호출
        profile(name="유재석", lang="파이썬", age=20)
        ->함수에서 전달받는 매개변수 값을 키워드=값를 이용용해서 호출해주면
        키워드에 해당하는 값이 순서가 뒤바껴 있어도 잘 들어감

    가변인자를 이용한 함수호출
        def profile(name, age, lang1, lang2, lang3, lang4):
            print("이름:{0}\t나이:{1}" .format(name,age))
            print(lang1,lang2,lang3,lang4)

        lang1,2,3,4를 다 채우는 경우도 있지만 못채우는 경우도 있음 -> 매번""해서 빈값을 넣어줘야함
        또는 네개를 넘는 경우는 함수 자체를 바꿔야함
        -> 가변 인자를 사용

        변경된 코드->
        def profile(name, age, *language):
            print("이름:{0}\t나이:{1}" .format(name,age))
            for lang in language:
                print(lang)

        이렇게 하면 서로 다른갯수의 값을 전달받을 수 있음

    지역변수랑 전역변수
        -> 알고있는 그대로임
        
        함수 내에서 밖에있는 전역변수를 사용할 때에는 global로 선언한 후 사용
        일반적으로는 함수 전달값으로 주고받음

        gun = 10

        def checkpoint(soldiers): 
            global gun
            gun = gun-soldiers

        -> 단순하게 함수 호출하면 됨
            
        def checkpoint(gun, soldiers): 
            gun = gun - soldiers
            reuturn gun

        -> gun = checkpoint(gun,n) 이렇게 호풀해서 밖에있는 gun에 값을 update

표준 입출력
    출력
        print("a"+"b") ->그냥 붙어서 나옴
        print("a", "b", sep=",", end="?") 
        -> sep값을 설정을 안하면 ,자리에 공백 하나가 껴져서 나옴
        설정하면 ,자리에 설정된 값이 껴져서 나옴
        -> end값을 설정 안하면 마지막에 그냥 줄바꿈
        설정하면 마지막에 설정된 값으로 출력이 끝남

        정렬
            print(a.ljst(n)) -> a를 포함하여 n칸을 확보한 후 왼쪽정렬
            print(a.rjst(n)) -> a를 포함하여 n칸을 확보한 후 오른쪽정렬
            print(str(num).zfill(n)) ->num을 포함하여 n칸을 확보한 후 빈공간은 0으로 채움

    입력
        a = input("입력하세요") -> 입력하세요를 출력 후 입력을 받은 후 a에 저장
            입력 받는거는 string형태로 저장됨
    
    다양한 출력 포멧
        print("{0: >10}".format(500)) ->10자리를 확보후 500을 오른쪽 정렬하여 출력. 빈공간은 빈공간으로 둠
        print("{0: >+10}".format(500)) -> 똑같은데 양수일땐 + 표시, 음수일땐 -표시

        print("{0:_<10}".format(500)) ->10자리 확보 왼쪽정렬, 빈칸은 _로채움

        print("{0:,}".format(1000000)) -> 3자리마다 ,를 적어줌
        print("{0:+,}".format(1000000)) -> 똑같은데 양수면+표시 음수면 -표시

        print("{0:^<+30,}".format(1000000)) 
        ->빈공간은 ^로채움, 왼쪽정렬, 부호표시, 30자리 확보, 세자리마다 ,표시

        print("{0:f}".format(5/3)) -> 소숫점 표시
        print("{0:.nf}".format(5/3)) -> 소숫점 n+1번쨰 자리에서 반올림

    파일 입출력
        파일변수 = open("파일이름", "w", encoding="utf8") -> utf8지정하는것이 좋음
        print("수학 : 0", file=파일이름)
        print("영어 : 50", file=파일이름)
        파일변수.close()
        -> 쓰기 전용 파일을 만들어서 내용 작성 후 닫음. w는 덮어쓰기

        이미 내용이 존재하는 파일에 이어서 작성하고 싶으면
        open할때 "a"(append)로 해야함.
        파일변수 = open("파일이름", "a", encoding="utf8")
        파일변수.wirte("과학 : 80\n") -> write로 작성하면 줄바꿈이 되지 않아서 직접 해줘야함
        파일변수.wirte("코딩 : 70\n")
        파일변수.close()

        파일변수 = open("파일이름", "r", encoding="utf8") -> 읽기전용
        print(파일변수.read()) -> 파일안에 있는 모든 내용을 가져와서 읽어줌
        파일변수.close()

        파일변수 = open("파일이름", "r", encoding="utf8")
        print(파일변수.readline()) -> 한줄을 읽어오고나서 커서는 다음줄로 이동함
        파일변수.close()

        파일변수 = open("파일이름", "r", encoding="utf8")
        while True:
            line = 파일변수.readline()
            if not line:
                break
            print(line)
        파일변수.close()
        -> 파일안에 내용이 없을때까지 읽어옴

        파일변수 = open("파일이름", "r", encoding="utf8")
        lines = 파일변수.readlines() -> list형태로 저장
        for line in lines:
            print(line)
        파일변수.close()

    pickle : 프로그램상에서 사용하고 있는 데이터를 파일 형태로 저장해줌
        그걸 누군가에게 주면 그걸 또 사용할 수 있음

        import pickle
        profile_file = open("profile.pickle", "wb") -> pickle을 이용할때에는 binary파일
        profile = {"이름":"박명수","나이":30,"취미":["축구","골프","코딩"]}
        print(profile)
        pickle.bump(profile, profile_file) -> profile에있는 정보를 파일에 저장
        profile_file.close()

        profile_file = open("profile.pickle", "rb")
        profile = pickle.load(profile_file) ->파일에있는 내용을 데이터형태로 불러옴
        print(profile)
        profile_file.close()

    with : 파일을 다룰 때 편하게 해줌

        import pickle

        with open("profile.pickle", "rb") as profile_file:
            print(pickle.load(profile_file))

        -> close해줄필요 없이 with문을 빠져나오면서 종료됨

        파일변수 = open("파일이름", "w", encoding="utf8") -> utf8지정하는것이 좋음
        print("수학 : 0", file=파일이름)
        print("영어 : 50", file=파일이름)
        파일변수.close()
        ->
        with open("파일이름", "w") as 파일변수:
            print("수학 : 0", file=파일이름)
            print("영어 : 50", file=파일이름)
        
        -> 매번 close를 해줄필요가 없어서 수월함

class
    #마린 : 공격유닛, 군인. 총을 쏠수 있음
    name = "마린"  -> 유닛의 이름
    hp = 40 -> 유닛의 체력
    damage = 5 -> 유닛의 공격력

    #탱크 : 공격유닛, 탱크크. 포를 쏠수 있는데 일반모드 / 시즈모드(고정하고 공격)가 있음
    tank_name = "탱크"
    tank_hp = 150
    tank_damage = 35

    def attack(name, location, damage):
        print("{0}: {1} 방향으로 적군을 공격합니다. [공격력 {2}]".format(name, location, damage))

    attack(name, "1시", damage)
    attack(tank_name, "1시", tank_damage) -> 어떤 유닛이 어떤 방향으로 공격하는지 알려줌

    만약 탱크가 하나 더 추가된다면
    tank2_name = "탱크"
    tank2_hp = 150
    tank2_damage = 35
    이렇게 다시 만들어야하는데 매번 만들어야함. 그래서 사용하는게 class

    class Unit:
        def __init__(self, name, hp, damage): -> init 함수는 기본적으로 만들어져야 함함
            self.name = name
            self.hp = hp
            self.damage = tank_damage

    marine1 = Unit("마린", 40, 5) -> self 부분을 제외하고 전달값을 입력
    tank = Unit("탱크", 150, 35)

    __init__ : python에서 사용되는 생성자. 객체가 생성될 때 기본적으로 불려짐

    멤버변수 : class 내에서 정의된 변수
    
    #레이스 : 공중유닛, 비행기. 클로킹(상대방에게 보이지 않음)기술이 존재함.
    wraith1 = Unit("레이스", 80, 5)
    print("유닛이름 : {0}, 공격력 : {1}" .format(wraith1.name, wraith1.damage))
    -> 멤버변수를 외부에서 사용 가능

    # 마인드 컨트롤 : 상대방 유닛을 내 것으로 만드는것 (빼앗음)
    wraith2 = Unit("빼앗은 레이스", 80, 5)
    wraith2.clocking = True
        -> clocking 은 Unit class에 없는 변수. 외부에서 추가로 할당한거임
        파이썬에서는 외부에서 객체에 추가로 변수를 만들 수 있음 근데 해당 객체에만 적용되는거임

    method
        class AttakcUnit: #공격유닛
            def __init__(self, name, hp, damage): 
                self.name = name
                self.hp = hp
                self.damage = tank_damage

            def attack(self, location): -> class내에 method앞에는 항상 self를 적어줌줌
                print("{0 : {1}방향으로 적군을 공격 합니다. [공격력 {2}]}".format(self.name, sloation, self.damage))
                name과 damage는 자기 자신에 있는 변수를 사용, location은 method에서 전달받은 값

            def damaged(self, damage):
                print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
                self.hp -= damage
                print("{0} : 현재 체력은 {1}입니다.".format(self.name, self.hp))
                if self.hp <= 0:
                    print("{0} : 파괴되었습니다." .format(self.name))

        #파이어뱃 : 공격유닛, 화염방사기
        firebat1 = AttakcUnit("파이어뱃", 50, 16)
        firebat1.attack("5시")
        firebat1.damaged(25)
        firebat1.damaged(25)

    상속
        유닛중에는 공격력이 없는 유닛들도 있음

        class Unit: #일반유닛
            def __init__(self, name, hp): 
                self.name = name
                self.hp = hp

        class AttakcUnit(Unit): -> Unit class를 상속받아서 만들어짐
            def __init__(self, name, hp, damage): 
                Unit.__init__(self, name, hp) -> 상속받은거 명시헤줌
                self.damage = tank_damage

            def attack(self, location): -> class내에 method앞에는 항상 self를 적어줌줌
                print("{0 : {1}방향으로 적군을 공격 합니다. [공격력 {2}]}".format(self.name, sloation, self.damage))
                name과 damage는 자기 자신에 있는 변수를 사용, location은 method에서 전달받은 값

            def damaged(self, damage):
                print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
                self.hp -= damage
                print("{0} : 현재 체력은 {1}입니다.".format(self.name, self.hp))
                if self.hp <= 0:
                    print("{0} : 파괴되었습니다." .format(self.name))

    다중상속 : 여러곳에서 상속받음

        #드랍쉽 : 공중 유닛, 수송기. 마린/파이어뱃/탱크 등을 수송해줌. 공격기능은 없음.
        class Flyable:
            def __init__(self, flying_speed):
                self.flying_speed = flying_speed

            def fly(self, name, location)
                print("{0} : {1}방향으로 날아갑니다.[속도 {2}]" .format(name, location, self.flying_speed))

        #공중 공격 유닛 클래스
        class FlyableAttakcUnit(AttakcUnit, Flyable): -> 다중상속은 ,로 구분
            def __init__(self, name, hp, damage, flying_speed):
                AttakcUnit.__init__(self, name, hp, damage)
                Flyable.__init__(self, flying_speed)

        #발키리 : 공중공격 유닛, 한번에 14발 미사일 발사
        valkyrie = FlyableAttakcUnit("발키리", 200, 6, 5)
        valkyrie.fly(valkyrie.name, "3시") -> Flyable class에 있는 method.

메소드 오버라이딩
    자식 class에서 정의한 method를 새롭게 정의해서 사용함.
    
    class Unit: #일반유닛
        def __init__(self, name, hp, speed): 
            self.name = name
            self.hp = hp
            self.speed = speed

        def move(self, location):
            print("[지상유닛 이동]")
            print("{0} : {1} 방향으로 이동합니다[속도 {2}]" .format(self.name, location, self.speed))
    
    class AttakcUnit(Unit): #공격유닛
            def __init__(self, name, hp, speed, damage): 
                Unit.__init__(self, name, hp, speed) -> 상속받은거 명시헤줌
                self.damage = tank_damage

            def attack(self, location): -> class내에 method앞에는 항상 self를 적어줌줌
                print("{0 : {1}방향으로 적군을 공격 합니다. [공격력 {2}]}".format(self.name, sloation, self.damage))
                name과 damage는 자기 자신에 있는 변수를 사용, location은 method에서 전달받은 값

            def damaged(self, damage):
                print("{0} : {1} 데미지를 입었습니다.".format(self.name, damage))
                self.hp -= damage
                print("{0} : 현재 체력은 {1}입니다.".format(self.name, self.hp))
                if self.hp <= 0:
                    print("{0} : 파괴되었습니다." .format(self.name))

    class Flyable:
            def __init__(self, flying_speed):
                self.flying_speed = flying_speed

            def fly(self, name, location)
                print("{0} : {1}방향으로 날아갑니다.[속도 {2}]" .format(name, location, self.flying_speed))

    #공중 공격 유닛 클래스
    class FlyableAttakcUnit(AttakcUnit, Flyable):
        def __init__(self, name, hp, damage, flying_speed):
            AttakcUnit.__init__(self, name, hp, 0, damage) #지상 speed 0
            Flyable.__init__(self, flying_speed)

        def move(self, location):
            print("[공중유닛이동]")
            self.fly(self.name, location) -> 메소드 오버라이딩(AttakcUnit이 상속받은 Unit의 move함수를 재정의한거거)

    #벌쳐 : 지상유닛, 기동성 좋음
    vulture = AttakcUnit("벌쳐", 80, 10, 20)

    #배틀크루져 : 공중유닛, 체력도 굉장히 좋음, 공경력도 좋음
    battlecruiser = FlyableAttakcUnit("배틀크루져", 500, 25, 3)

    vulture.move("11시")
    battlecruiser.fly(battlecruiser.name, "9시")

    -> 지상유닛에는 move, 공중유닛에는 fly함수를 사용해서 공중인지 지상인지 구분해야함
    -> FlyableAttakcUnit class에 move 메소드를 오버라이딩해서 해결


    pass

    #건물
    class BuildingUnit(Unit):
        def __init__(self, name, hp, location):
            pass -> 아무것도 안하고 그냥 넘어간다는 뜻. 일단은 완성된것 처럼 보임.

    #서플라이 디폿 : 건물, 1개 건물 = 8유닛.
    supply_depot = BuildingUnit("서플라이 디폿", 500, "7시")

    def game_start():
        print("게임을 시작합니다.")

    def game_over():
        pass

    game_start()
    game_over()
    -> 게임을 시작합니다 만 뜸

    super
        #건물
        class BuildingUnit(Unit):
            def __init__(self, name, hp, location):
                #Unit.__init__(self, name, hp, 0)
                #super().init(name, hp, 0 ) -> 두개 똑같음음
                self.location = location

        
        class Unit:
            def __init__(self):
                print("Unit 생성자")

        class Flyable:
            def __init__(self):
                print("Flyable 생성자")

        class FlyableUnit(Unit, Flyable):
            def __init__(self):
                #super().__init__()  이렇게하면 안됨
                Unit.__init__(self)
                Flyable.__init__(self) -> 상속한걸 명시적으로 해야함

        #드랍쉽
        dropship = FlyableUnit() -> Unit 생성자만 출력됨.
        -> super을 사용하면 다중상속 받으면 맨 처음 class에 대해서만 init함수가 호출됨
        -> 다중상속을 할때에는 명시적으로 해야함